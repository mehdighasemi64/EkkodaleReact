//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    movieNeo4JPOST(body: Movie | undefined): Promise<void> {
        let url_ = this.baseUrl + "/MovieNeo4J";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMovieNeo4JPOST(_response);
        });
    }

    protected processMovieNeo4JPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param title (optional) 
     * @return Success
     */
    movieNeo4JDELETE(title: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/MovieNeo4J?";
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMovieNeo4JDELETE(_response);
        });
    }

    protected processMovieNeo4JDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    movieNeo4JAll(): Promise<Movie[]> {
        let url_ = this.baseUrl + "/MovieNeo4J";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processMovieNeo4JAll(_response);
        });
    }

    protected processMovieNeo4JAll(response: Response): Promise<Movie[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Movie.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Movie[]>(null as any);
    }

    /**
     * @param title (optional) 
     * @param year (optional) 
     * @return Success
     */
    searchByParam(title: string | undefined, year: number | undefined, name: string, family: string, age: string): Promise<Movie[]> {
        let url_ = this.baseUrl + "/MovieNeo4J/SearchByParam/{Name}/{Family}/{Age}?";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{Name}", encodeURIComponent("" + name));
        if (family === undefined || family === null)
            throw new Error("The parameter 'family' must be defined.");
        url_ = url_.replace("{Family}", encodeURIComponent("" + family));
        if (age === undefined || age === null)
            throw new Error("The parameter 'age' must be defined.");
        url_ = url_.replace("{Age}", encodeURIComponent("" + age));
        if (title === null)
            throw new Error("The parameter 'title' cannot be null.");
        else if (title !== undefined)
            url_ += "Title=" + encodeURIComponent("" + title) + "&";
        if (year === null)
            throw new Error("The parameter 'year' cannot be null.");
        else if (year !== undefined)
            url_ += "Year=" + encodeURIComponent("" + year) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchByParam(_response);
        });
    }

    protected processSearchByParam(response: Response): Promise<Movie[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Movie.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Movie[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    personNeo4JPOST(body: Person | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PersonNeo4J";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPersonNeo4JPOST(_response);
        });
    }

    protected processPersonNeo4JPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    personNeo4JAll(): Promise<Person[]> {
        let url_ = this.baseUrl + "/PersonNeo4J";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPersonNeo4JAll(_response);
        });
    }

    protected processPersonNeo4JAll(response: Response): Promise<Person[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Person[]>(null as any);
    }

    /**
     * @param name (optional) 
     * @return Success
     */
    personNeo4JDELETE(name: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PersonNeo4J?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPersonNeo4JDELETE(_response);
        });
    }

    protected processPersonNeo4JDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param name (optional) 
     * @param newName (optional) 
     * @return Success
     */
    personNeo4JPATCH(name: string | undefined, newName: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PersonNeo4J?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "Name=" + encodeURIComponent("" + name) + "&";
        if (newName === null)
            throw new Error("The parameter 'newName' cannot be null.");
        else if (newName !== undefined)
            url_ += "NewName=" + encodeURIComponent("" + newName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPersonNeo4JPATCH(_response);
        });
    }

    protected processPersonNeo4JPATCH(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param personName (optional) 
     * @param movieTitle (optional) 
     * @return Success
     */
    createActingRelationship(personName: string | undefined, movieTitle: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PersonNeo4J/CreateActingRelationship?";
        if (personName === null)
            throw new Error("The parameter 'personName' cannot be null.");
        else if (personName !== undefined)
            url_ += "PersonName=" + encodeURIComponent("" + personName) + "&";
        if (movieTitle === null)
            throw new Error("The parameter 'movieTitle' cannot be null.");
        else if (movieTitle !== undefined)
            url_ += "MovieTitle=" + encodeURIComponent("" + movieTitle) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateActingRelationship(_response);
        });
    }

    protected processCreateActingRelationship(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param personID (optional) 
     * @param personID2 (optional) 
     * @return Success
     */
    createFriendShip(personID: number | undefined, personID2: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PersonNeo4J/CreateFriendShip?";
        if (personID === null)
            throw new Error("The parameter 'personID' cannot be null.");
        else if (personID !== undefined)
            url_ += "PersonID=" + encodeURIComponent("" + personID) + "&";
        if (personID2 === null)
            throw new Error("The parameter 'personID2' cannot be null.");
        else if (personID2 !== undefined)
            url_ += "PersonID2=" + encodeURIComponent("" + personID2) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateFriendShip(_response);
        });
    }

    protected processCreateFriendShip(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param personName (optional) 
     * @param movieTitle (optional) 
     * @param relationshipType (optional) 
     * @return Success
     */
    createRelationship(personName: string | undefined, movieTitle: string | undefined, relationshipType: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PersonNeo4J/CreateRelationship?";
        if (personName === null)
            throw new Error("The parameter 'personName' cannot be null.");
        else if (personName !== undefined)
            url_ += "PersonName=" + encodeURIComponent("" + personName) + "&";
        if (movieTitle === null)
            throw new Error("The parameter 'movieTitle' cannot be null.");
        else if (movieTitle !== undefined)
            url_ += "MovieTitle=" + encodeURIComponent("" + movieTitle) + "&";
        if (relationshipType === null)
            throw new Error("The parameter 'relationshipType' cannot be null.");
        else if (relationshipType !== undefined)
            url_ += "RelationshipType=" + encodeURIComponent("" + relationshipType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateRelationship(_response);
        });
    }

    protected processCreateRelationship(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param personID (optional) 
     * @param personID2 (optional) 
     * @return Success
     */
    deleteFriendShip(personID: number | undefined, personID2: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/PersonNeo4J/DeleteFriendShip?";
        if (personID === null)
            throw new Error("The parameter 'personID' cannot be null.");
        else if (personID !== undefined)
            url_ += "PersonID=" + encodeURIComponent("" + personID) + "&";
        if (personID2 === null)
            throw new Error("The parameter 'personID2' cannot be null.");
        else if (personID2 !== undefined)
            url_ += "PersonID2=" + encodeURIComponent("" + personID2) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteFriendShip(_response);
        });
    }

    protected processDeleteFriendShip(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    searchByParam2(name: string, family: string, age: number): Promise<Person[]> {
        let url_ = this.baseUrl + "/PersonNeo4J/SearchByParam/{Name}/{Family}/{Age}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{Name}", encodeURIComponent("" + name));
        if (family === undefined || family === null)
            throw new Error("The parameter 'family' must be defined.");
        url_ = url_.replace("{Family}", encodeURIComponent("" + family));
        if (age === undefined || age === null)
            throw new Error("The parameter 'age' must be defined.");
        url_ = url_.replace("{Age}", encodeURIComponent("" + age));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchByParam2(_response);
        });
    }

    protected processSearchByParam2(response: Response): Promise<Person[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Person.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Person[]>(null as any);
    }

    /**
     * @return Success
     */
    getWeatherForecast(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }
}

export class Movie implements IMovie {
    movieID?: number;
    title?: string | undefined;
    year?: number;

    constructor(data?: IMovie) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.movieID = _data["movieID"];
            this.title = _data["title"];
            this.year = _data["year"];
        }
    }

    static fromJS(data: any): Movie {
        data = typeof data === 'object' ? data : {};
        let result = new Movie();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["movieID"] = this.movieID;
        data["title"] = this.title;
        data["year"] = this.year;
        return data;
    }
}

export interface IMovie {
    movieID?: number;
    title?: string | undefined;
    year?: number;
}

export class Person implements IPerson {
    personID?: number;
    name?: string | undefined;
    family?: string | undefined;
    age?: number;
    birthYear?: number;
    readonly fullName?: string | undefined;

    constructor(data?: IPerson) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.personID = _data["personID"];
            this.name = _data["name"];
            this.family = _data["family"];
            this.age = _data["age"];
            this.birthYear = _data["birthYear"];
            (<any>this).fullName = _data["fullName"];
        }
    }

    static fromJS(data: any): Person {
        data = typeof data === 'object' ? data : {};
        let result = new Person();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["personID"] = this.personID;
        data["name"] = this.name;
        data["family"] = this.family;
        data["age"] = this.age;
        data["birthYear"] = this.birthYear;
        data["fullName"] = this.fullName;
        return data;
    }
}

export interface IPerson {
    personID?: number;
    name?: string | undefined;
    family?: string | undefined;
    age?: number;
    birthYear?: number;
    fullName?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}